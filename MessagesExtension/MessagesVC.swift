//
//  MessagesVC.swift
//  MessagesExtension
//
//  Created by Ivan Trofimov on 15.01.17.
//  Copyright Â© 2017 Ivan Trofimov. All rights reserved.
//

import UIKit
import Messages

class MessagesVC: MSMessagesAppViewController {
    
    static var firstCall = true
    override func viewDidLoad() {
        print("viewDidLoad was called")
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        print("didReceiveMemoryWarning was called")
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        print("willBecomeActive was called")
        presentCustomViewController(for: conversation, with: presentationStyle)

        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        print("didResignActive was called")

        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        print("didReceive was called")
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        print("didStartSending was called")
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        print("didCancelSending was called")
        // Called when the user deletes the message without sending it.
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        print("willTransition was called")
        // Called before the extension transitions to a new presentation style.
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        print("didTransition was called")
        guard let conversation = activeConversation else { fatalError("Expected an active converstation") }
        presentCustomViewController(for: conversation, with: presentationStyle)
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
}

extension MessagesVC {
    func presentCustomViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
        let vc: UIViewController
        if presentationStyle == .compact {
            let vcc = instantiateStickersVC() as! StickersVC
            vcc.conversation = conversation
            vc = vcc
            print("-----compact-----")
        } else {
            let vcc = instantiateGameVC() as! GameVC
            vcc.conversation = conversation
            vc = vcc
            print("-----expanded-----")
        }
        // Remove any existing child controllers.
        for child in childViewControllers {
            child.willMove(toParentViewController: nil)
            child.view.removeFromSuperview()
            child.removeFromParentViewController()
        }
        
        // Embed the new controller.
        addChildViewController(vc)
        vc.view.frame = view.bounds
        vc.view.translatesAutoresizingMaskIntoConstraints = false
        
        // set hidden for recalculation constrains
        vc.view.isHidden = true
        view.addSubview(vc.view)
        vc.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        vc.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        vc.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        vc.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        vc.view.isHidden = false
        vc.didMove(toParentViewController: self)
    }
    private func instantiateGameVC() -> UIViewController {
        guard let controller = storyboard?.instantiateViewController(
            withIdentifier: GameVC.storyboardIdentifier) as? GameVC
            else { fatalError("Unable to instantiate an GameVC from the storyboard") }
        
        //controller.delegate = self
        
        return controller
    }
    private func instantiateStickersVC() -> UIViewController {
        guard let controller = storyboard?.instantiateViewController(
            withIdentifier: StickersVC.storyboardIdentifier) as? StickersVC
            else { fatalError("Unable to instantiate an StickersVC from the storyboard") }
        
        //controller.delegate = self
        
        return controller
    }
}

extension MessagesVC {
    func setCompactPresentationStyle() {
        requestPresentationStyle(.compact)
    }
    func setExpandedPresentationStyle() {
        requestPresentationStyle(.expanded)
    }
}

